================================================
Problem 1: Construct a DFA for substring "101"
================================================

The DFA accepts any binary string that contains the substring "101" at least once.

1. Formal Definition:
   The DFA is defined as M = (Q, Σ, δ, q₀, F) where:
   * Q = {q0, q1, q2, q3}
     - q0: Initial state (no part of "101" seen, or pattern broken)
     - q1: The last input symbol was '1' (potential start of "101")
     - q2: The last two input symbols were "10" (potential "101" prefix)
     - q3: The substring "101" has been encountered (accepting state)
   * Σ = {0, 1} (The input alphabet)
   * q₀ = q0 (The start state)
   * F = {q3} (The set of accept states)
   * δ (Transition Function):
     ------------------------------------
     | Current State | Input '0' | Input '1' |
     |---------------|-----------|-----------|
     |      q0       |    q0     |    q1     |
     |      q1       |    q2     |    q1     |
     |      q2       |    q0     |    q3     |
     |    **q3**     |    q3     |    q3     |
     ------------------------------------
     (Alternatively, as a list of transitions:
       δ(q0, 0) = q0
       δ(q0, 1) = q1
       δ(q1, 0) = q2
       δ(q1, 1) = q1
       δ(q2, 0) = q0
       δ(q2, 1) = q3
       δ(q3, 0) = q3
       δ(q3, 1) = q3)

2. State Diagram:

   Example using Mermaid syntax (if submitting a .md file):
   ```mermaid
   graph LR
       --> q0;
       q0--0-->q0;
       q0--1-->q1;
       q1--0-->q2;
       q1--1-->q1;
       q2--0-->q0;
       q2--1-->q3;
       q3--0-->q3;
       q3--1-->q3;
       q3((q3));